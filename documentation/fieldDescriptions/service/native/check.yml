ICMP:
  percentage_failed_threshold: |
    The percentage of addresses at the given target that must fail for a region to
    be counted as failed. This option only matters when there are multiple IP
    addresses behind the target when the target is a domain.
  ip_version: |
    The IP version to use when pinging.
HTTP:
  username: |
    An optional HTTP Basic Authentication username.
  password: |
    An optional HTTP Basic Authentication password.
  response_body_must_contain: |
    This field supports two different matching modes (given by
    `response_body_must_contain_mode`):

    `exact`: If the requested page does not contain this exact (case-sensitive)
    string, then the check will fail.

    `regex`: If the requested page does not match against the given regex, then
    the check will fail. [Click here](https://hund.io/help/documentation/regular-expressions) for
    more information on the use and supported syntax of Hund regexes.
  response_body_must_contain_mode: |
    The response containment mode; either `exact` or `regex`. The modes are discussed
    under `response_body_must_contain`.
  response_code_must_be: |
    If the requested page does not return this response code, then the check will
    fail.
  headers: |
    A list of additional HTTP headers to send to the target. The following list of
    header names are reserved and cannot be set by a check:

    * `Accept-Charset`
    * `Accept-Encoding`
    * `Authentication`
    * `Connection`
    * `Content-Length`
    * `Date`
    * `Host`
    * `Keep-Alive`
    * `Origin`
    * `Proxy-.*`
    * `Sec-.*`
    * `Referer`
    * `TE`
    * `Trailer`
    * `Transfer-Encoding`
    * `User-Agent`
    * `Via`
  follow_redirects: |
    Follow any HTTP redirects given by the requested target. Please note that this
    check will only follow up to 9 redirects.
  ssl_verify_peer: |
    Require the target's TLS certificate to be valid.
DNS:
  target: |
    The domain/IP address that will be queried. IP addresses do not need to be
    converted to the `z.y.x.w.in-addr.arpa` format, as this will be done
    automatically; however, both formats are accepted.
  record_type: |
    The type of DNS record to query for on the target.
  nameservers: |
    An optional list of nameservers to make DNS queries with. This field is
    ignored by SOA queries since they use the nameservers yielded by querying NS
    on the target.
  responses_must_contain: |
    A list of assertions to make against the records yielded by the query. The
    format of these assertions is *similar* to DNS record syntax, but is
    slightly simplified and allows for only asserting parts of a record's RDATA,
    rather than the entire thing. The check will fail depending on the value of
    `response_containment`.

    This field is ignored by the SOA check, as it does not use assertions to
    determine the validity of SOA records. Instead, we ensure that every
    nameserver reported by querying NS on the target reports the same SOA serial.
    If your target's nameservers report conflicting SOA serials, we consider the
    check failed.

    **Example Assertions (for MX record type):**
    ```json
    [
      "10 mail.example.com",
      "spool.example.com",
      "mail2.example.com"
    ]
    ```

    Note above how we can assert both the priority and domain (*without* the
    terminating period required by canonical DNS) of an MX record, or instead
    simply the domain.
  response_containment: |
    Whether `all` of the assertions in the given list must match the DNS response,
    or rather just `any` of them (i.e. at least one).
TCP:
  port: |
    The port at the target to connect to.
  send_data: |
    Optional data to send to the target after connecting. If this field is left
    blank, nothing is sent to the target after connecting.

    This field supports [escape codes](https://hund.io/help/documentation/text-field-escape-codes).
  response_must_contain: |
    This field supports two different matching modes (given by `response_must_contain_mode`):

    `exact`: Text that the response from the target must contain exactly
    (case-sensitive). In exact match mode, this field supports
    [escape codes](https://hund.io/help/documentation/text-field-escape-codes).

    `regex`: A regex that the response from the target must match against.
    [Click here](https://hund.io/help/documentation/regular-expressions) for more information on
    the use and supported syntax of Hund regexes.

    If you send data and expect the target to reply, you must populate this field.
    Leaving this field blank will prevent the check from receiving data from the
    target unless forced to wait for an initial response.

    The "response" from the target that this text is asserted against will be the
    response from the target *after* sending data. If data is not sent to the
    target, this text is asserted against the *initial* response.
  response_must_contain_mode: |
    The response containment mode; either `exact` or `regex`. The modes are discussed
    under `response_must_contain`.
  wait_for_initial_response: |
    Whether or not to wait for an initial response from the target before sending
    data or closing the connection.
  ip_version: |
    The IP version to use when calling the target.
UDP:
  port: |
    The port at the target to connect to.
  send_data: |
    Data to send to the target after connecting. Unlike in `tcp`, this
    field is required.

    This field supports [escape codes](https://hund.io/help/documentation/text-field-escape-codes).
  response_must_contain: |
    This field supports two different matching modes (given by `response_must_contain_mode`):

    `exact`: Text that the response from the target must contain exactly
    (case-sensitive). In exact match mode, this field supports
    [escape codes](https://hund.io/help/documentation/text-field-escape-codes).

    `regex`: A regex that the response from the target must match against.
    [Click here](https://hund.io/help/documentation/regular-expressions) for more information on
    the use and supported syntax of Hund regexes.

    Leaving this field blank will still cause the check to wait for a response
    from the target after sending data, though no assertions will be made about
    the payload of the response.
  response_must_contain_mode: |
    The response containment mode; either `exact` or `regex`. The modes are discussed
    under `response_must_contain`.
  ip_version: |
    The IP version to use when calling the target.
default:
  method: |
    The method to use to check the target.
  target: |
    The host the check will make calls to.
  regions: |
    The regions you would like the target to be checked from. All regions are
    weighted equally when calculating the outcome of a check. Currently, a single
    check can use up to 8 regions simultaneously. Using at least two regions for a
    single check is recommended in order to confirm failures across regions.

    **Note:** Each check may use up to three regions at no extra cost. Each region
    added to this check beyond the base three will incur an additional cost.
    For specific pricing information, please visit the [pricing](https://hund.io/pricing)
    page.
  frequency: |
    The frequency of the check in milliseconds. The maximum frequency is every 30
    seconds.

    **Note:** Any frequency greater than every 60 seconds will force the component
    to become High-Frequency, at an additional cost. For specific pricing
    information, please visit the [pricing](https://hund.io/pricing) page.
  timeout: |
    The maximum number of milliseconds the check should wait on the host before
    failing.
  percentage_regions_failed_threshold: |
    The percentage of regions that must report a failed check before the entire
    check can be considered failed. Requiring at least two regions for this
    threshold is recommended in order to confirm failures across regions.
  consecutive_check_degraded_threshold: |
    The number of consecutive failed checks required before posting a "degraded"
    status.

    Note that regardless of threshold settings, a component will post "operational"
    whenever a check succeeds, thus resetting the consecutive check failure count.

    When `null`, denotes that this check will not use a "degraded" stage
    when encountering check failures.

    When 0, denotes that this check will post "degraded" upon the first check failure.
  consecutive_check_outage_threshold: |
    The number of consecutive failed checks required before posting an "outage"
    status. If `consecutive_check_degraded_threshold` is non-null, then the outage
    will only be posted after degraded has posted according to its own threshold.

    Note that regardless of threshold settings, a component will post "operational"
    whenever a check succeeds, thus resetting the consecutive check failure count.

    When 0, denotes that this check will post "outage" upon the first check failure
    (or the first check failure after "degraded" has been posted in case
    `consecutive_check_degraded_threshold` is set).
